
Modulator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000004d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000045c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000010f  00800100  00800100  000004d0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004d0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000500  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  0000053c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bc2  00000000  00000000  00000604  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000092c  00000000  00000000  000011c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006bb  00000000  00000000  00001af2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000224  00000000  00000000  000021b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000488  00000000  00000000  000023d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000047b  00000000  00000000  0000285c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00002cd7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 35 01 	jmp	0x26a	; 0x26a <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	22 e0       	ldi	r18, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	af 30       	cpi	r26, 0x0F	; 15
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 4f 00 	call	0x9e	; 0x9e <main>
  88:	0c 94 2c 02 	jmp	0x458	; 0x458 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <INT0_Init>:
		sei();
    }
}

void INT0_Init(){
	EICRA|=(1<<ISC01)|(1<<ISC00);
  90:	e9 e6       	ldi	r30, 0x69	; 105
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	83 60       	ori	r24, 0x03	; 3
  98:	80 83       	st	Z, r24
	EIMSK|=(1<<INT0);
  9a:	e8 9a       	sbi	0x1d, 0	; 29
  9c:	08 95       	ret

0000009e <main>:
	}
}

int main(void)
{
	DDRD|=(1<<TX)|(1<<LED)|(1<<PIN_OUT);
  9e:	8a b1       	in	r24, 0x0a	; 10
  a0:	8a 68       	ori	r24, 0x8A	; 138
  a2:	8a b9       	out	0x0a, r24	; 10
	PORTD|=(1<<RX)|(1<<PIN_OUT);
  a4:	8b b1       	in	r24, 0x0b	; 11
  a6:	89 60       	ori	r24, 0x09	; 9
  a8:	8b b9       	out	0x0b, r24	; 11
	USART_Init();
  aa:	0e 94 1e 02 	call	0x43c	; 0x43c <USART_Init>
	Timer0_Init();
  ae:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <Timer0_Init>
	INT0_Init();
  b2:	0e 94 48 00 	call	0x90	; 0x90 <INT0_Init>
	sei();
  b6:	78 94       	sei
    while (1)
    {
		cli();
  b8:	f8 94       	cli
		if(Timer0_TimeIsOut(&time1,5)){
  ba:	45 e0       	ldi	r20, 0x05	; 5
  bc:	50 e0       	ldi	r21, 0x00	; 0
  be:	60 e0       	ldi	r22, 0x00	; 0
  c0:	70 e0       	ldi	r23, 0x00	; 0
  c2:	84 e0       	ldi	r24, 0x04	; 4
  c4:	91 e0       	ldi	r25, 0x01	; 1
  c6:	0e 94 77 01 	call	0x2ee	; 0x2ee <Timer0_TimeIsOut>
  ca:	88 23       	and	r24, r24
  cc:	21 f0       	breq	.+8      	; 0xd6 <main+0x38>
			sei();
  ce:	78 94       	sei
			if(EIFR&(1<<INTF0)){
  d0:	e0 99       	sbic	0x1c, 0	; 28
				EIFR|=1<<INTF0;
  d2:	e0 9a       	sbi	0x1c, 0	; 28
			}
			EIMSK|=(1<<INT0);
  d4:	e8 9a       	sbi	0x1d, 0	; 29
		}
		sei();
  d6:	78 94       	sei
    }
  d8:	ef cf       	rjmp	.-34     	; 0xb8 <main+0x1a>

000000da <Array_to_Msg>:
void INT0_Init(){
	EICRA|=(1<<ISC01)|(1<<ISC00);
	EIMSK|=(1<<INT0);
}

uint16_t Array_to_Msg(uint8_t* arr){
  da:	bc 01       	movw	r22, r24
  dc:	dc 01       	movw	r26, r24
  de:	fc 01       	movw	r30, r24
  e0:	33 96       	adiw	r30, 0x03	; 3
	uint16_t num=0;
	uint8_t temp=0;
  e2:	20 e0       	ldi	r18, 0x00	; 0
	for(int i=0;i<3;i++){
		temp=temp*10+(arr[i]-0x30);
  e4:	8d 91       	ld	r24, X+
  e6:	22 0f       	add	r18, r18
  e8:	92 2f       	mov	r25, r18
  ea:	99 0f       	add	r25, r25
  ec:	99 0f       	add	r25, r25
  ee:	29 0f       	add	r18, r25
  f0:	20 53       	subi	r18, 0x30	; 48
  f2:	28 0f       	add	r18, r24
}

uint16_t Array_to_Msg(uint8_t* arr){
	uint16_t num=0;
	uint8_t temp=0;
	for(int i=0;i<3;i++){
  f4:	ea 17       	cp	r30, r26
  f6:	fb 07       	cpc	r31, r27
  f8:	a9 f7       	brne	.-22     	; 0xe4 <Array_to_Msg+0xa>
		temp=temp*10+(arr[i]-0x30);
	}
	num=temp<<8;
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	32 2f       	mov	r19, r18
  fe:	22 27       	eor	r18, r18
 100:	6a 5f       	subi	r22, 0xFA	; 250
 102:	7f 4f       	sbci	r23, 0xFF	; 255
	temp=0;
 104:	90 e0       	ldi	r25, 0x00	; 0
	for(int i=3;i<6;i++){
		temp=temp*10+(arr[i]-0x30);
 106:	81 91       	ld	r24, Z+
 108:	99 0f       	add	r25, r25
 10a:	49 2f       	mov	r20, r25
 10c:	44 0f       	add	r20, r20
 10e:	44 0f       	add	r20, r20
 110:	94 0f       	add	r25, r20
 112:	90 53       	subi	r25, 0x30	; 48
 114:	98 0f       	add	r25, r24
	for(int i=0;i<3;i++){
		temp=temp*10+(arr[i]-0x30);
	}
	num=temp<<8;
	temp=0;
	for(int i=3;i<6;i++){
 116:	e6 17       	cp	r30, r22
 118:	f7 07       	cpc	r31, r23
 11a:	a9 f7       	brne	.-22     	; 0x106 <Array_to_Msg+0x2c>
		temp=temp*10+(arr[i]-0x30);
	}
	num+=temp;
	return num;
 11c:	a9 01       	movw	r20, r18
 11e:	49 0f       	add	r20, r25
 120:	51 1d       	adc	r21, r1
 122:	ca 01       	movw	r24, r20
 124:	08 95       	ret

00000126 <__vector_1>:

Time time1=0;
void INT0_Init();
uint16_t Array_to_Msg(uint8_t* arr);

ISR(INT0_vect){
 126:	1f 92       	push	r1
 128:	0f 92       	push	r0
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	0f 92       	push	r0
 12e:	11 24       	eor	r1, r1
 130:	ef 92       	push	r14
 132:	ff 92       	push	r15
 134:	0f 93       	push	r16
 136:	1f 93       	push	r17
 138:	2f 93       	push	r18
 13a:	3f 93       	push	r19
 13c:	4f 93       	push	r20
 13e:	5f 93       	push	r21
 140:	6f 93       	push	r22
 142:	7f 93       	push	r23
 144:	8f 93       	push	r24
 146:	9f 93       	push	r25
 148:	af 93       	push	r26
 14a:	bf 93       	push	r27
 14c:	ef 93       	push	r30
 14e:	ff 93       	push	r31
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	cd b7       	in	r28, 0x3d	; 61
 156:	de b7       	in	r29, 0x3e	; 62
 158:	26 97       	sbiw	r28, 0x06	; 6
 15a:	de bf       	out	0x3e, r29	; 62
 15c:	cd bf       	out	0x3d, r28	; 61
	static uint8_t state=0;
	static uint8_t i=0;
	static uint16_t data=0;
	uint8_t mass[6]={0};
 15e:	fe 01       	movw	r30, r28
 160:	31 96       	adiw	r30, 0x01	; 1
 162:	86 e0       	ldi	r24, 0x06	; 6
 164:	df 01       	movw	r26, r30
 166:	1d 92       	st	X+, r1
 168:	8a 95       	dec	r24
 16a:	e9 f7       	brne	.-6      	; 0x166 <__vector_1+0x40>
	Timer0_StartTimer(&time1);
 16c:	84 e0       	ldi	r24, 0x04	; 4
 16e:	91 e0       	ldi	r25, 0x01	; 1
 170:	0e 94 69 01 	call	0x2d2	; 0x2d2 <Timer0_StartTimer>
	EIMSK&=~(1<<INT0);
 174:	e8 98       	cbi	0x1d, 0	; 29
	switch (state){
 176:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <state.1760>
 17a:	81 30       	cpi	r24, 0x01	; 1
 17c:	71 f1       	breq	.+92     	; 0x1da <__vector_1+0xb4>
 17e:	20 f0       	brcs	.+8      	; 0x188 <__vector_1+0x62>
 180:	82 30       	cpi	r24, 0x02	; 2
 182:	09 f4       	brne	.+2      	; 0x186 <__vector_1+0x60>
 184:	4a c0       	rjmp	.+148    	; 0x21a <__vector_1+0xf4>
 186:	54 c0       	rjmp	.+168    	; 0x230 <__vector_1+0x10a>
	case 0:
			if(Buffer_DataAvailable()>=7){
 188:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <Buffer_DataAvailable>
 18c:	87 30       	cpi	r24, 0x07	; 7
 18e:	10 f1       	brcs	.+68     	; 0x1d4 <__vector_1+0xae>
				if(Buffer_Read()=='\n'){
 190:	0e 94 cd 01 	call	0x39a	; 0x39a <Buffer_Read>
 194:	8a 30       	cpi	r24, 0x0A	; 10
 196:	09 f0       	breq	.+2      	; 0x19a <__vector_1+0x74>
 198:	4b c0       	rjmp	.+150    	; 0x230 <__vector_1+0x10a>
 19a:	8e 01       	movw	r16, r28
 19c:	0f 5f       	subi	r16, 0xFF	; 255
 19e:	1f 4f       	sbci	r17, 0xFF	; 255
 1a0:	7e 01       	movw	r14, r28
 1a2:	b7 e0       	ldi	r27, 0x07	; 7
 1a4:	eb 0e       	add	r14, r27
 1a6:	f1 1c       	adc	r15, r1
					for(uint8_t i=0;i<6;i++){
						mass[i]=Buffer_Read();
 1a8:	0e 94 cd 01 	call	0x39a	; 0x39a <Buffer_Read>
 1ac:	f8 01       	movw	r30, r16
 1ae:	81 93       	st	Z+, r24
 1b0:	8f 01       	movw	r16, r30
	EIMSK&=~(1<<INT0);
	switch (state){
	case 0:
			if(Buffer_DataAvailable()>=7){
				if(Buffer_Read()=='\n'){
					for(uint8_t i=0;i<6;i++){
 1b2:	ee 15       	cp	r30, r14
 1b4:	ff 05       	cpc	r31, r15
 1b6:	c1 f7       	brne	.-16     	; 0x1a8 <__vector_1+0x82>
						mass[i]=Buffer_Read();
					}
					data=Array_to_Msg(mass);
 1b8:	ce 01       	movw	r24, r28
 1ba:	01 96       	adiw	r24, 0x01	; 1
 1bc:	0e 94 6d 00 	call	0xda	; 0xda <Array_to_Msg>
 1c0:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <data.1762+0x1>
 1c4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <data.1762>
					PORTD&=~(1<<PIN_OUT);// 1
 1c8:	5b 98       	cbi	0x0b, 3	; 11
					PORTD&=~(1<<LED);
 1ca:	5f 98       	cbi	0x0b, 7	; 11
					state=1;
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <state.1760>
 1d2:	2e c0       	rjmp	.+92     	; 0x230 <__vector_1+0x10a>
				}
			}else{
				PORTD|=(1<<PIN_OUT);// 0
 1d4:	5b 9a       	sbi	0x0b, 3	; 11
				PORTD|=(1<<LED);
 1d6:	5f 9a       	sbi	0x0b, 7	; 11
 1d8:	2b c0       	rjmp	.+86     	; 0x230 <__vector_1+0x10a>
			}
			break;

	case 1:
			if((data>>i)&1){
 1da:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <data.1762>
 1de:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <data.1762+0x1>
 1e2:	00 90 00 01 	lds	r0, 0x0100	; 0x800100 <_edata>
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <__vector_1+0xc6>
 1e8:	96 95       	lsr	r25
 1ea:	87 95       	ror	r24
 1ec:	0a 94       	dec	r0
 1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <__vector_1+0xc2>
 1f0:	80 ff       	sbrs	r24, 0
 1f2:	03 c0       	rjmp	.+6      	; 0x1fa <__vector_1+0xd4>
				PORTD&=~(1<<PIN_OUT);// 1
 1f4:	5b 98       	cbi	0x0b, 3	; 11
				PORTD&=~(1<<LED);
 1f6:	5f 98       	cbi	0x0b, 7	; 11
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <__vector_1+0xd8>
			}else{
				PORTD|=(1<<PIN_OUT);// 0
 1fa:	5b 9a       	sbi	0x0b, 3	; 11
				PORTD|=(1<<LED);
 1fc:	5f 9a       	sbi	0x0b, 7	; 11
			}
			i++;
 1fe:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 202:	8f 5f       	subi	r24, 0xFF	; 255
			if(i>15){
 204:	80 31       	cpi	r24, 0x10	; 16
 206:	18 f4       	brcc	.+6      	; 0x20e <__vector_1+0xe8>
				PORTD&=~(1<<LED);
			}else{
				PORTD|=(1<<PIN_OUT);// 0
				PORTD|=(1<<LED);
			}
			i++;
 208:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 20c:	11 c0       	rjmp	.+34     	; 0x230 <__vector_1+0x10a>
			if(i>15){
				i=0;
 20e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
				state=2;
 212:	82 e0       	ldi	r24, 0x02	; 2
 214:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <state.1760>
 218:	0b c0       	rjmp	.+22     	; 0x230 <__vector_1+0x10a>
			}
			break;
		
	case 2:
			if(data%2){
 21a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <data.1762>
 21e:	80 ff       	sbrs	r24, 0
 220:	03 c0       	rjmp	.+6      	; 0x228 <__vector_1+0x102>
				PORTD|=(1<<PIN_OUT);// 0
 222:	5b 9a       	sbi	0x0b, 3	; 11
				PORTD|=(1<<LED);
 224:	5f 9a       	sbi	0x0b, 7	; 11
 226:	02 c0       	rjmp	.+4      	; 0x22c <__vector_1+0x106>
				}else{
				PORTD&=~(1<<PIN_OUT);// 1
 228:	5b 98       	cbi	0x0b, 3	; 11
				PORTD&=~(1<<LED);
 22a:	5f 98       	cbi	0x0b, 7	; 11
				}
			state=0;
 22c:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <state.1760>
			break;
	}
}
 230:	26 96       	adiw	r28, 0x06	; 6
 232:	0f b6       	in	r0, 0x3f	; 63
 234:	f8 94       	cli
 236:	de bf       	out	0x3e, r29	; 62
 238:	0f be       	out	0x3f, r0	; 63
 23a:	cd bf       	out	0x3d, r28	; 61
 23c:	df 91       	pop	r29
 23e:	cf 91       	pop	r28
 240:	ff 91       	pop	r31
 242:	ef 91       	pop	r30
 244:	bf 91       	pop	r27
 246:	af 91       	pop	r26
 248:	9f 91       	pop	r25
 24a:	8f 91       	pop	r24
 24c:	7f 91       	pop	r23
 24e:	6f 91       	pop	r22
 250:	5f 91       	pop	r21
 252:	4f 91       	pop	r20
 254:	3f 91       	pop	r19
 256:	2f 91       	pop	r18
 258:	1f 91       	pop	r17
 25a:	0f 91       	pop	r16
 25c:	ff 90       	pop	r15
 25e:	ef 90       	pop	r14
 260:	0f 90       	pop	r0
 262:	0f be       	out	0x3f, r0	; 63
 264:	0f 90       	pop	r0
 266:	1f 90       	pop	r1
 268:	18 95       	reti

0000026a <__vector_14>:
	OCR0A=125;
	sei();
}
Time Timer0_GetTime(){
	return GlobalTime;
}
 26a:	1f 92       	push	r1
 26c:	0f 92       	push	r0
 26e:	0f b6       	in	r0, 0x3f	; 63
 270:	0f 92       	push	r0
 272:	11 24       	eor	r1, r1
 274:	8f 93       	push	r24
 276:	9f 93       	push	r25
 278:	af 93       	push	r26
 27a:	bf 93       	push	r27
 27c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <GlobalTime>
 280:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <GlobalTime+0x1>
 284:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <GlobalTime+0x2>
 288:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <GlobalTime+0x3>
 28c:	01 96       	adiw	r24, 0x01	; 1
 28e:	a1 1d       	adc	r26, r1
 290:	b1 1d       	adc	r27, r1
 292:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <GlobalTime>
 296:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <GlobalTime+0x1>
 29a:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <GlobalTime+0x2>
 29e:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <GlobalTime+0x3>
 2a2:	bf 91       	pop	r27
 2a4:	af 91       	pop	r26
 2a6:	9f 91       	pop	r25
 2a8:	8f 91       	pop	r24
 2aa:	0f 90       	pop	r0
 2ac:	0f be       	out	0x3f, r0	; 63
 2ae:	0f 90       	pop	r0
 2b0:	1f 90       	pop	r1
 2b2:	18 95       	reti

000002b4 <Timer0_Init>:
 2b4:	84 b5       	in	r24, 0x24	; 36
 2b6:	82 60       	ori	r24, 0x02	; 2
 2b8:	84 bd       	out	0x24, r24	; 36
 2ba:	85 b5       	in	r24, 0x25	; 37
 2bc:	83 60       	ori	r24, 0x03	; 3
 2be:	85 bd       	out	0x25, r24	; 37
 2c0:	ee e6       	ldi	r30, 0x6E	; 110
 2c2:	f0 e0       	ldi	r31, 0x00	; 0
 2c4:	80 81       	ld	r24, Z
 2c6:	82 60       	ori	r24, 0x02	; 2
 2c8:	80 83       	st	Z, r24
 2ca:	8d e7       	ldi	r24, 0x7D	; 125
 2cc:	87 bd       	out	0x27, r24	; 39
 2ce:	78 94       	sei
 2d0:	08 95       	ret

000002d2 <Timer0_StartTimer>:
void Timer0_StartTimer(Time* StartTime){
	*StartTime=Timer0_GetTime();
 2d2:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <GlobalTime>
 2d6:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <GlobalTime+0x1>
 2da:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <GlobalTime+0x2>
 2de:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <GlobalTime+0x3>
 2e2:	fc 01       	movw	r30, r24
 2e4:	40 83       	st	Z, r20
 2e6:	51 83       	std	Z+1, r21	; 0x01
 2e8:	62 83       	std	Z+2, r22	; 0x02
 2ea:	73 83       	std	Z+3, r23	; 0x03
 2ec:	08 95       	ret

000002ee <Timer0_TimeIsOut>:
}
uint8_t Timer0_TimeIsOut(Time* StartTime,Time Delay){
 2ee:	0f 93       	push	r16
 2f0:	1f 93       	push	r17
	return (Timer0_GetTime()-(*StartTime)>=Delay);
 2f2:	00 91 08 01 	lds	r16, 0x0108	; 0x800108 <GlobalTime>
 2f6:	10 91 09 01 	lds	r17, 0x0109	; 0x800109 <GlobalTime+0x1>
 2fa:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <GlobalTime+0x2>
 2fe:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <GlobalTime+0x3>
 302:	fc 01       	movw	r30, r24
 304:	80 81       	ld	r24, Z
 306:	91 81       	ldd	r25, Z+1	; 0x01
 308:	a2 81       	ldd	r26, Z+2	; 0x02
 30a:	b3 81       	ldd	r27, Z+3	; 0x03
 30c:	08 1b       	sub	r16, r24
 30e:	19 0b       	sbc	r17, r25
 310:	2a 0b       	sbc	r18, r26
 312:	3b 0b       	sbc	r19, r27
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	04 17       	cp	r16, r20
 318:	15 07       	cpc	r17, r21
 31a:	26 07       	cpc	r18, r22
 31c:	37 07       	cpc	r19, r23
 31e:	08 f4       	brcc	.+2      	; 0x322 <Timer0_TimeIsOut+0x34>
 320:	80 e0       	ldi	r24, 0x00	; 0
 322:	1f 91       	pop	r17
 324:	0f 91       	pop	r16
 326:	08 95       	ret

00000328 <Buffer_Write>:
#include <avr/interrupt.h>

Buffer mass1;

void Buffer_Write(uint8_t data){
	if(mass1.HEAD==mass1.TAIL && mass1.UNHANDLED==MAX_LEN){
 328:	ec e0       	ldi	r30, 0x0C	; 12
 32a:	f1 e0       	ldi	r31, 0x01	; 1
 32c:	90 81       	ld	r25, Z
 32e:	21 81       	ldd	r18, Z+1	; 0x01
 330:	92 13       	cpse	r25, r18
 332:	16 c0       	rjmp	.+44     	; 0x360 <Buffer_Write+0x38>
 334:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <mass1+0x2>
 338:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <mass1+0x3>
 33c:	2f 3f       	cpi	r18, 0xFF	; 255
 33e:	31 05       	cpc	r19, r1
 340:	79 f4       	brne	.+30     	; 0x360 <Buffer_Write+0x38>
		mass1.buff[mass1.HEAD]=data;
 342:	e9 2f       	mov	r30, r25
 344:	f0 e0       	ldi	r31, 0x00	; 0
 346:	e4 5f       	subi	r30, 0xF4	; 244
 348:	fe 4f       	sbci	r31, 0xFE	; 254
 34a:	84 83       	std	Z+4, r24	; 0x04
		mass1.HEAD++;
 34c:	9f 5f       	subi	r25, 0xFF	; 255
 34e:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <mass1>
		if(mass1.HEAD>MAX_LEN-1)mass1.HEAD=0;
 352:	9f 3f       	cpi	r25, 0xFF	; 255
 354:	f9 f4       	brne	.+62     	; 0x394 <Buffer_Write+0x6c>
 356:	ec e0       	ldi	r30, 0x0C	; 12
 358:	f1 e0       	ldi	r31, 0x01	; 1
 35a:	10 82       	st	Z, r1
		mass1.TAIL++;
		if(mass1.TAIL>MAX_LEN-1)mass1.TAIL=0;
 35c:	11 82       	std	Z+1, r1	; 0x01
 35e:	08 95       	ret
	}else{
		mass1.buff[mass1.HEAD]=data;
 360:	ac e0       	ldi	r26, 0x0C	; 12
 362:	b1 e0       	ldi	r27, 0x01	; 1
 364:	e9 2f       	mov	r30, r25
 366:	f0 e0       	ldi	r31, 0x00	; 0
 368:	e4 5f       	subi	r30, 0xF4	; 244
 36a:	fe 4f       	sbci	r31, 0xFE	; 254
 36c:	84 83       	std	Z+4, r24	; 0x04
		mass1.UNHANDLED++;	
 36e:	12 96       	adiw	r26, 0x02	; 2
 370:	2d 91       	ld	r18, X+
 372:	3c 91       	ld	r19, X
 374:	13 97       	sbiw	r26, 0x03	; 3
 376:	2f 5f       	subi	r18, 0xFF	; 255
 378:	3f 4f       	sbci	r19, 0xFF	; 255
 37a:	13 96       	adiw	r26, 0x03	; 3
 37c:	3c 93       	st	X, r19
 37e:	2e 93       	st	-X, r18
 380:	12 97       	sbiw	r26, 0x02	; 2
		mass1.HEAD++;
 382:	9f 5f       	subi	r25, 0xFF	; 255
		if(mass1.HEAD>MAX_LEN-1)mass1.HEAD=0;
 384:	9f 3f       	cpi	r25, 0xFF	; 255
 386:	19 f0       	breq	.+6      	; 0x38e <Buffer_Write+0x66>
		mass1.TAIL++;
		if(mass1.TAIL>MAX_LEN-1)mass1.TAIL=0;
	}else{
		mass1.buff[mass1.HEAD]=data;
		mass1.UNHANDLED++;	
		mass1.HEAD++;
 388:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <mass1>
 38c:	08 95       	ret
		if(mass1.HEAD>MAX_LEN-1)mass1.HEAD=0;
 38e:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <mass1>
	}
}
 392:	08 95       	ret
void Buffer_Write(uint8_t data){
	if(mass1.HEAD==mass1.TAIL && mass1.UNHANDLED==MAX_LEN){
		mass1.buff[mass1.HEAD]=data;
		mass1.HEAD++;
		if(mass1.HEAD>MAX_LEN-1)mass1.HEAD=0;
		mass1.TAIL++;
 394:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <mass1+0x1>
 398:	08 95       	ret

0000039a <Buffer_Read>:
		mass1.HEAD++;
		if(mass1.HEAD>MAX_LEN-1)mass1.HEAD=0;
	}
}
uint8_t Buffer_Read(){
	mass1.TAIL++;
 39a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <mass1+0x1>
 39e:	8f 5f       	subi	r24, 0xFF	; 255
	if(mass1.TAIL>MAX_LEN-1)mass1.TAIL=0;
 3a0:	8f 3f       	cpi	r24, 0xFF	; 255
 3a2:	19 f0       	breq	.+6      	; 0x3aa <Buffer_Read+0x10>
		mass1.HEAD++;
		if(mass1.HEAD>MAX_LEN-1)mass1.HEAD=0;
	}
}
uint8_t Buffer_Read(){
	mass1.TAIL++;
 3a4:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <mass1+0x1>
 3a8:	02 c0       	rjmp	.+4      	; 0x3ae <Buffer_Read+0x14>
	if(mass1.TAIL>MAX_LEN-1)mass1.TAIL=0;
 3aa:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <mass1+0x1>
	mass1.UNHANDLED--;
 3ae:	ec e0       	ldi	r30, 0x0C	; 12
 3b0:	f1 e0       	ldi	r31, 0x01	; 1
 3b2:	82 81       	ldd	r24, Z+2	; 0x02
 3b4:	93 81       	ldd	r25, Z+3	; 0x03
 3b6:	01 97       	sbiw	r24, 0x01	; 1
 3b8:	93 83       	std	Z+3, r25	; 0x03
 3ba:	82 83       	std	Z+2, r24	; 0x02
	if(mass1.TAIL==0){
 3bc:	e1 81       	ldd	r30, Z+1	; 0x01
 3be:	e1 11       	cpse	r30, r1
 3c0:	03 c0       	rjmp	.+6      	; 0x3c8 <Buffer_Read+0x2e>
		return mass1.buff[MAX_LEN-1];
 3c2:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <mass1+0x102>
 3c6:	08 95       	ret
	}
	else{
		return mass1.buff[mass1.TAIL-1];
 3c8:	f0 e0       	ldi	r31, 0x00	; 0
 3ca:	e4 5f       	subi	r30, 0xF4	; 244
 3cc:	fe 4f       	sbci	r31, 0xFE	; 254
 3ce:	83 81       	ldd	r24, Z+3	; 0x03
	}
}
 3d0:	08 95       	ret

000003d2 <Buffer_DataAvailable>:
// 			return 1;
// 		}
// 	}else{
// 		return 1;
// 	}
}
 3d2:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <mass1+0x2>
 3d6:	08 95       	ret

000003d8 <__vector_18>:

ISR(USART_RX_vect){
 3d8:	1f 92       	push	r1
 3da:	0f 92       	push	r0
 3dc:	0f b6       	in	r0, 0x3f	; 63
 3de:	0f 92       	push	r0
 3e0:	11 24       	eor	r1, r1
 3e2:	2f 93       	push	r18
 3e4:	3f 93       	push	r19
 3e6:	4f 93       	push	r20
 3e8:	5f 93       	push	r21
 3ea:	6f 93       	push	r22
 3ec:	7f 93       	push	r23
 3ee:	8f 93       	push	r24
 3f0:	9f 93       	push	r25
 3f2:	af 93       	push	r26
 3f4:	bf 93       	push	r27
 3f6:	cf 93       	push	r28
 3f8:	df 93       	push	r29
 3fa:	ef 93       	push	r30
 3fc:	ff 93       	push	r31
	UCSR0B&=~(1<<RXCIE0);
 3fe:	c1 ec       	ldi	r28, 0xC1	; 193
 400:	d0 e0       	ldi	r29, 0x00	; 0
 402:	88 81       	ld	r24, Y
 404:	8f 77       	andi	r24, 0x7F	; 127
 406:	88 83       	st	Y, r24
	Buffer_Write(UDR0);
 408:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 40c:	0e 94 94 01 	call	0x328	; 0x328 <Buffer_Write>
	UCSR0B|=1<<RXCIE0;
 410:	88 81       	ld	r24, Y
 412:	80 68       	ori	r24, 0x80	; 128
 414:	88 83       	st	Y, r24
}
 416:	ff 91       	pop	r31
 418:	ef 91       	pop	r30
 41a:	df 91       	pop	r29
 41c:	cf 91       	pop	r28
 41e:	bf 91       	pop	r27
 420:	af 91       	pop	r26
 422:	9f 91       	pop	r25
 424:	8f 91       	pop	r24
 426:	7f 91       	pop	r23
 428:	6f 91       	pop	r22
 42a:	5f 91       	pop	r21
 42c:	4f 91       	pop	r20
 42e:	3f 91       	pop	r19
 430:	2f 91       	pop	r18
 432:	0f 90       	pop	r0
 434:	0f be       	out	0x3f, r0	; 63
 436:	0f 90       	pop	r0
 438:	1f 90       	pop	r1
 43a:	18 95       	reti

0000043c <USART_Init>:

void USART_Init(){
	UCSR0B|=(1<<RXCIE0)|(1<<TXEN0)|(1<<RXEN0);
 43c:	e1 ec       	ldi	r30, 0xC1	; 193
 43e:	f0 e0       	ldi	r31, 0x00	; 0
 440:	80 81       	ld	r24, Z
 442:	88 69       	ori	r24, 0x98	; 152
 444:	80 83       	st	Z, r24
	UCSR0C|=(1<<UCSZ01)|(1<<UCSZ00);
 446:	e2 ec       	ldi	r30, 0xC2	; 194
 448:	f0 e0       	ldi	r31, 0x00	; 0
 44a:	80 81       	ld	r24, Z
 44c:	86 60       	ori	r24, 0x06	; 6
 44e:	80 83       	st	Z, r24
	UBRR0L = 51;
 450:	83 e3       	ldi	r24, 0x33	; 51
 452:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 456:	08 95       	ret

00000458 <_exit>:
 458:	f8 94       	cli

0000045a <__stop_program>:
 45a:	ff cf       	rjmp	.-2      	; 0x45a <__stop_program>

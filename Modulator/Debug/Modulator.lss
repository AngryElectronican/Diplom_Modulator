
Modulator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000430  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003bc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000010e  00800100  00800100  00000430  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000430  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000460  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  0000049c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000adc  00000000  00000000  0000055c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008b4  00000000  00000000  00001038  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000065c  00000000  00000000  000018ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f0  00000000  00000000  00001f48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000471  00000000  00000000  00002138  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000292  00000000  00000000  000025a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  0000283b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 9c 01 	jmp	0x338	; 0x338 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	22 e0       	ldi	r18, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ae 30       	cpi	r26, 0x0E	; 14
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 b9 00 	call	0x172	; 0x172 <main>
  88:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_1>:

Time time1=0;
void INT0_Init();


ISR(INT0_vect){
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	2f 93       	push	r18
  9c:	3f 93       	push	r19
  9e:	4f 93       	push	r20
  a0:	5f 93       	push	r21
  a2:	6f 93       	push	r22
  a4:	7f 93       	push	r23
  a6:	8f 93       	push	r24
  a8:	9f 93       	push	r25
  aa:	af 93       	push	r26
  ac:	bf 93       	push	r27
  ae:	ef 93       	push	r30
  b0:	ff 93       	push	r31
	static uint8_t state=0;
	static uint8_t i=0;
	static uint8_t data=0;
	Timer0_StartTimer(&time1);
  b2:	83 e0       	ldi	r24, 0x03	; 3
  b4:	91 e0       	ldi	r25, 0x01	; 1
  b6:	0e 94 0b 01 	call	0x216	; 0x216 <Timer0_StartTimer>
	EIMSK&=~(1<<INT0);
  ba:	e8 98       	cbi	0x1d, 0	; 29
	switch (state){
  bc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <state.1758>
  c0:	81 30       	cpi	r24, 0x01	; 1
  c2:	a9 f0       	breq	.+42     	; 0xee <__vector_1+0x5e>
  c4:	18 f0       	brcs	.+6      	; 0xcc <__vector_1+0x3c>
  c6:	82 30       	cpi	r24, 0x02	; 2
  c8:	89 f1       	breq	.+98     	; 0x12c <__vector_1+0x9c>
  ca:	3b c0       	rjmp	.+118    	; 0x142 <__vector_1+0xb2>
	case 0:
		if(Buffer_DataAvailable()){
  cc:	0e 94 8b 01 	call	0x316	; 0x316 <Buffer_DataAvailable>
  d0:	88 23       	and	r24, r24
  d2:	51 f0       	breq	.+20     	; 0xe8 <__vector_1+0x58>
			data=Buffer_Read();
  d4:	0e 94 6f 01 	call	0x2de	; 0x2de <Buffer_Read>
  d8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <data.1760>
			PORTD&=~(1<<PIN_OUT);// 1
  dc:	5b 98       	cbi	0x0b, 3	; 11
			PORTD&=~(1<<LED);
  de:	5f 98       	cbi	0x0b, 7	; 11
			state=1;
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state.1758>
  e6:	2d c0       	rjmp	.+90     	; 0x142 <__vector_1+0xb2>
		}else{
			PORTD|=(1<<PIN_OUT);// 0
  e8:	5b 9a       	sbi	0x0b, 3	; 11
			PORTD|=(1<<LED);
  ea:	5f 9a       	sbi	0x0b, 7	; 11
  ec:	2a c0       	rjmp	.+84     	; 0x142 <__vector_1+0xb2>
		}
		break;

	case 1:
			if((data>>i)&1){
  ee:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <data.1760>
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	00 90 00 01 	lds	r0, 0x0100	; 0x800100 <_edata>
  f8:	02 c0       	rjmp	.+4      	; 0xfe <__vector_1+0x6e>
  fa:	95 95       	asr	r25
  fc:	87 95       	ror	r24
  fe:	0a 94       	dec	r0
 100:	e2 f7       	brpl	.-8      	; 0xfa <__vector_1+0x6a>
 102:	80 ff       	sbrs	r24, 0
 104:	03 c0       	rjmp	.+6      	; 0x10c <__vector_1+0x7c>
				PORTD&=~(1<<PIN_OUT);// 1
 106:	5b 98       	cbi	0x0b, 3	; 11
				PORTD&=~(1<<LED);
 108:	5f 98       	cbi	0x0b, 7	; 11
 10a:	02 c0       	rjmp	.+4      	; 0x110 <__vector_1+0x80>
			}else{
				PORTD|=(1<<PIN_OUT);// 0
 10c:	5b 9a       	sbi	0x0b, 3	; 11
				PORTD|=(1<<LED);
 10e:	5f 9a       	sbi	0x0b, 7	; 11
			}
			i++;
 110:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 114:	8f 5f       	subi	r24, 0xFF	; 255
			if(i>7){
 116:	88 30       	cpi	r24, 0x08	; 8
 118:	18 f4       	brcc	.+6      	; 0x120 <__vector_1+0x90>
				PORTD&=~(1<<LED);
			}else{
				PORTD|=(1<<PIN_OUT);// 0
				PORTD|=(1<<LED);
			}
			i++;
 11a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 11e:	11 c0       	rjmp	.+34     	; 0x142 <__vector_1+0xb2>
			if(i>7){
				i=0;
 120:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
				state=2;
 124:	82 e0       	ldi	r24, 0x02	; 2
 126:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state.1758>
 12a:	0b c0       	rjmp	.+22     	; 0x142 <__vector_1+0xb2>
			}
		break;
		
	case 2:
		if(data%2){
 12c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <data.1760>
 130:	80 ff       	sbrs	r24, 0
 132:	03 c0       	rjmp	.+6      	; 0x13a <__vector_1+0xaa>
			PORTD|=(1<<PIN_OUT);// 0
 134:	5b 9a       	sbi	0x0b, 3	; 11
			PORTD|=(1<<LED);
 136:	5f 9a       	sbi	0x0b, 7	; 11
 138:	02 c0       	rjmp	.+4      	; 0x13e <__vector_1+0xae>
			}else{
			PORTD&=~(1<<PIN_OUT);// 1
 13a:	5b 98       	cbi	0x0b, 3	; 11
			PORTD&=~(1<<LED);
 13c:	5f 98       	cbi	0x0b, 7	; 11
		}
		state=0;
 13e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <state.1758>
		break;
	}
}
 142:	ff 91       	pop	r31
 144:	ef 91       	pop	r30
 146:	bf 91       	pop	r27
 148:	af 91       	pop	r26
 14a:	9f 91       	pop	r25
 14c:	8f 91       	pop	r24
 14e:	7f 91       	pop	r23
 150:	6f 91       	pop	r22
 152:	5f 91       	pop	r21
 154:	4f 91       	pop	r20
 156:	3f 91       	pop	r19
 158:	2f 91       	pop	r18
 15a:	0f 90       	pop	r0
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	0f 90       	pop	r0
 160:	1f 90       	pop	r1
 162:	18 95       	reti

00000164 <INT0_Init>:
		sei();
    }
}

void INT0_Init(){
	EICRA|=(1<<ISC01)|(1<<ISC00);
 164:	e9 e6       	ldi	r30, 0x69	; 105
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	83 60       	ori	r24, 0x03	; 3
 16c:	80 83       	st	Z, r24
	EIMSK|=(1<<INT0);
 16e:	e8 9a       	sbi	0x1d, 0	; 29
 170:	08 95       	ret

00000172 <main>:
	}
}

int main(void)
{
	DDRD|=(1<<TX)|(1<<LED)|(1<<PIN_OUT);
 172:	8a b1       	in	r24, 0x0a	; 10
 174:	8a 68       	ori	r24, 0x8A	; 138
 176:	8a b9       	out	0x0a, r24	; 10
	PORTD|=(1<<RX)|(1<<PIN_OUT);
 178:	8b b1       	in	r24, 0x0b	; 11
 17a:	89 60       	ori	r24, 0x09	; 9
 17c:	8b b9       	out	0x0b, r24	; 11
	USART_Init();
 17e:	0e 94 ce 01 	call	0x39c	; 0x39c <USART_Init>
	Timer0_Init();
 182:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <Timer0_Init>
	INT0_Init();
 186:	0e 94 b2 00 	call	0x164	; 0x164 <INT0_Init>
	sei();
 18a:	78 94       	sei
    while (1)
    {
		cli();
 18c:	f8 94       	cli
		if(Timer0_TimeIsOut(&time1,5)){
 18e:	45 e0       	ldi	r20, 0x05	; 5
 190:	50 e0       	ldi	r21, 0x00	; 0
 192:	60 e0       	ldi	r22, 0x00	; 0
 194:	70 e0       	ldi	r23, 0x00	; 0
 196:	83 e0       	ldi	r24, 0x03	; 3
 198:	91 e0       	ldi	r25, 0x01	; 1
 19a:	0e 94 19 01 	call	0x232	; 0x232 <Timer0_TimeIsOut>
 19e:	88 23       	and	r24, r24
 1a0:	21 f0       	breq	.+8      	; 0x1aa <main+0x38>
			sei();
 1a2:	78 94       	sei
			if(EIFR&(1<<INTF0)){
 1a4:	e0 99       	sbic	0x1c, 0	; 28
				EIFR|=1<<INTF0;
 1a6:	e0 9a       	sbi	0x1c, 0	; 28
			}
			EIMSK|=(1<<INT0);
 1a8:	e8 9a       	sbi	0x1d, 0	; 29
		}
		sei();
 1aa:	78 94       	sei
    }
 1ac:	ef cf       	rjmp	.-34     	; 0x18c <main+0x1a>

000001ae <__vector_14>:
	OCR0A=125;
	sei();
}
Time Timer0_GetTime(){
	return GlobalTime;
}
 1ae:	1f 92       	push	r1
 1b0:	0f 92       	push	r0
 1b2:	0f b6       	in	r0, 0x3f	; 63
 1b4:	0f 92       	push	r0
 1b6:	11 24       	eor	r1, r1
 1b8:	8f 93       	push	r24
 1ba:	9f 93       	push	r25
 1bc:	af 93       	push	r26
 1be:	bf 93       	push	r27
 1c0:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <GlobalTime>
 1c4:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <GlobalTime+0x1>
 1c8:	a0 91 09 01 	lds	r26, 0x0109	; 0x800109 <GlobalTime+0x2>
 1cc:	b0 91 0a 01 	lds	r27, 0x010A	; 0x80010a <GlobalTime+0x3>
 1d0:	01 96       	adiw	r24, 0x01	; 1
 1d2:	a1 1d       	adc	r26, r1
 1d4:	b1 1d       	adc	r27, r1
 1d6:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <GlobalTime>
 1da:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <GlobalTime+0x1>
 1de:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <GlobalTime+0x2>
 1e2:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <GlobalTime+0x3>
 1e6:	bf 91       	pop	r27
 1e8:	af 91       	pop	r26
 1ea:	9f 91       	pop	r25
 1ec:	8f 91       	pop	r24
 1ee:	0f 90       	pop	r0
 1f0:	0f be       	out	0x3f, r0	; 63
 1f2:	0f 90       	pop	r0
 1f4:	1f 90       	pop	r1
 1f6:	18 95       	reti

000001f8 <Timer0_Init>:
 1f8:	84 b5       	in	r24, 0x24	; 36
 1fa:	82 60       	ori	r24, 0x02	; 2
 1fc:	84 bd       	out	0x24, r24	; 36
 1fe:	85 b5       	in	r24, 0x25	; 37
 200:	83 60       	ori	r24, 0x03	; 3
 202:	85 bd       	out	0x25, r24	; 37
 204:	ee e6       	ldi	r30, 0x6E	; 110
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	80 81       	ld	r24, Z
 20a:	82 60       	ori	r24, 0x02	; 2
 20c:	80 83       	st	Z, r24
 20e:	8d e7       	ldi	r24, 0x7D	; 125
 210:	87 bd       	out	0x27, r24	; 39
 212:	78 94       	sei
 214:	08 95       	ret

00000216 <Timer0_StartTimer>:
void Timer0_StartTimer(Time* StartTime){
	*StartTime=Timer0_GetTime();
 216:	40 91 07 01 	lds	r20, 0x0107	; 0x800107 <GlobalTime>
 21a:	50 91 08 01 	lds	r21, 0x0108	; 0x800108 <GlobalTime+0x1>
 21e:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <GlobalTime+0x2>
 222:	70 91 0a 01 	lds	r23, 0x010A	; 0x80010a <GlobalTime+0x3>
 226:	fc 01       	movw	r30, r24
 228:	40 83       	st	Z, r20
 22a:	51 83       	std	Z+1, r21	; 0x01
 22c:	62 83       	std	Z+2, r22	; 0x02
 22e:	73 83       	std	Z+3, r23	; 0x03
 230:	08 95       	ret

00000232 <Timer0_TimeIsOut>:
}
uint8_t Timer0_TimeIsOut(Time* StartTime,Time Delay){
 232:	0f 93       	push	r16
 234:	1f 93       	push	r17
	return (Timer0_GetTime()-(*StartTime)>=Delay);
 236:	00 91 07 01 	lds	r16, 0x0107	; 0x800107 <GlobalTime>
 23a:	10 91 08 01 	lds	r17, 0x0108	; 0x800108 <GlobalTime+0x1>
 23e:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <GlobalTime+0x2>
 242:	30 91 0a 01 	lds	r19, 0x010A	; 0x80010a <GlobalTime+0x3>
 246:	fc 01       	movw	r30, r24
 248:	80 81       	ld	r24, Z
 24a:	91 81       	ldd	r25, Z+1	; 0x01
 24c:	a2 81       	ldd	r26, Z+2	; 0x02
 24e:	b3 81       	ldd	r27, Z+3	; 0x03
 250:	08 1b       	sub	r16, r24
 252:	19 0b       	sbc	r17, r25
 254:	2a 0b       	sbc	r18, r26
 256:	3b 0b       	sbc	r19, r27
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	04 17       	cp	r16, r20
 25c:	15 07       	cpc	r17, r21
 25e:	26 07       	cpc	r18, r22
 260:	37 07       	cpc	r19, r23
 262:	08 f4       	brcc	.+2      	; 0x266 <Timer0_TimeIsOut+0x34>
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	1f 91       	pop	r17
 268:	0f 91       	pop	r16
 26a:	08 95       	ret

0000026c <Buffer_Write>:
#include <avr/interrupt.h>

Buffer mass1;

void Buffer_Write(uint8_t data){
	if(mass1.HEAD==mass1.TAIL && mass1.UNHANDLED==MAX_LEN){
 26c:	eb e0       	ldi	r30, 0x0B	; 11
 26e:	f1 e0       	ldi	r31, 0x01	; 1
 270:	90 81       	ld	r25, Z
 272:	21 81       	ldd	r18, Z+1	; 0x01
 274:	92 13       	cpse	r25, r18
 276:	16 c0       	rjmp	.+44     	; 0x2a4 <Buffer_Write+0x38>
 278:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <mass1+0x2>
 27c:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <mass1+0x3>
 280:	2f 3f       	cpi	r18, 0xFF	; 255
 282:	31 05       	cpc	r19, r1
 284:	79 f4       	brne	.+30     	; 0x2a4 <Buffer_Write+0x38>
		mass1.buff[mass1.HEAD]=data;
 286:	e9 2f       	mov	r30, r25
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	e5 5f       	subi	r30, 0xF5	; 245
 28c:	fe 4f       	sbci	r31, 0xFE	; 254
 28e:	84 83       	std	Z+4, r24	; 0x04
		mass1.HEAD++;
 290:	9f 5f       	subi	r25, 0xFF	; 255
 292:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <mass1>
		if(mass1.HEAD>MAX_LEN-1)mass1.HEAD=0;
 296:	9f 3f       	cpi	r25, 0xFF	; 255
 298:	f9 f4       	brne	.+62     	; 0x2d8 <Buffer_Write+0x6c>
 29a:	eb e0       	ldi	r30, 0x0B	; 11
 29c:	f1 e0       	ldi	r31, 0x01	; 1
 29e:	10 82       	st	Z, r1
		mass1.TAIL++;
		if(mass1.TAIL>MAX_LEN-1)mass1.TAIL=0;
 2a0:	11 82       	std	Z+1, r1	; 0x01
 2a2:	08 95       	ret
	}else{
		mass1.buff[mass1.HEAD]=data;
 2a4:	ab e0       	ldi	r26, 0x0B	; 11
 2a6:	b1 e0       	ldi	r27, 0x01	; 1
 2a8:	e9 2f       	mov	r30, r25
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	e5 5f       	subi	r30, 0xF5	; 245
 2ae:	fe 4f       	sbci	r31, 0xFE	; 254
 2b0:	84 83       	std	Z+4, r24	; 0x04
		mass1.UNHANDLED++;	
 2b2:	12 96       	adiw	r26, 0x02	; 2
 2b4:	2d 91       	ld	r18, X+
 2b6:	3c 91       	ld	r19, X
 2b8:	13 97       	sbiw	r26, 0x03	; 3
 2ba:	2f 5f       	subi	r18, 0xFF	; 255
 2bc:	3f 4f       	sbci	r19, 0xFF	; 255
 2be:	13 96       	adiw	r26, 0x03	; 3
 2c0:	3c 93       	st	X, r19
 2c2:	2e 93       	st	-X, r18
 2c4:	12 97       	sbiw	r26, 0x02	; 2
		mass1.HEAD++;
 2c6:	9f 5f       	subi	r25, 0xFF	; 255
		if(mass1.HEAD>MAX_LEN-1)mass1.HEAD=0;
 2c8:	9f 3f       	cpi	r25, 0xFF	; 255
 2ca:	19 f0       	breq	.+6      	; 0x2d2 <Buffer_Write+0x66>
		mass1.TAIL++;
		if(mass1.TAIL>MAX_LEN-1)mass1.TAIL=0;
	}else{
		mass1.buff[mass1.HEAD]=data;
		mass1.UNHANDLED++;	
		mass1.HEAD++;
 2cc:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <mass1>
 2d0:	08 95       	ret
		if(mass1.HEAD>MAX_LEN-1)mass1.HEAD=0;
 2d2:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <mass1>
	}
}
 2d6:	08 95       	ret
void Buffer_Write(uint8_t data){
	if(mass1.HEAD==mass1.TAIL && mass1.UNHANDLED==MAX_LEN){
		mass1.buff[mass1.HEAD]=data;
		mass1.HEAD++;
		if(mass1.HEAD>MAX_LEN-1)mass1.HEAD=0;
		mass1.TAIL++;
 2d8:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <mass1+0x1>
 2dc:	08 95       	ret

000002de <Buffer_Read>:
		mass1.HEAD++;
		if(mass1.HEAD>MAX_LEN-1)mass1.HEAD=0;
	}
}
uint8_t Buffer_Read(){
	mass1.TAIL++;
 2de:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <mass1+0x1>
 2e2:	8f 5f       	subi	r24, 0xFF	; 255
	if(mass1.TAIL>MAX_LEN-1)mass1.TAIL=0;
 2e4:	8f 3f       	cpi	r24, 0xFF	; 255
 2e6:	19 f0       	breq	.+6      	; 0x2ee <Buffer_Read+0x10>
		mass1.HEAD++;
		if(mass1.HEAD>MAX_LEN-1)mass1.HEAD=0;
	}
}
uint8_t Buffer_Read(){
	mass1.TAIL++;
 2e8:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <mass1+0x1>
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <Buffer_Read+0x14>
	if(mass1.TAIL>MAX_LEN-1)mass1.TAIL=0;
 2ee:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <mass1+0x1>
	mass1.UNHANDLED--;
 2f2:	eb e0       	ldi	r30, 0x0B	; 11
 2f4:	f1 e0       	ldi	r31, 0x01	; 1
 2f6:	82 81       	ldd	r24, Z+2	; 0x02
 2f8:	93 81       	ldd	r25, Z+3	; 0x03
 2fa:	01 97       	sbiw	r24, 0x01	; 1
 2fc:	93 83       	std	Z+3, r25	; 0x03
 2fe:	82 83       	std	Z+2, r24	; 0x02
	if(mass1.TAIL==0){
 300:	e1 81       	ldd	r30, Z+1	; 0x01
 302:	e1 11       	cpse	r30, r1
 304:	03 c0       	rjmp	.+6      	; 0x30c <Buffer_Read+0x2e>
		return mass1.buff[MAX_LEN-1];
 306:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <mass1+0x102>
 30a:	08 95       	ret
	}
	else{
		return mass1.buff[mass1.TAIL-1];
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	e5 5f       	subi	r30, 0xF5	; 245
 310:	fe 4f       	sbci	r31, 0xFE	; 254
 312:	83 81       	ldd	r24, Z+3	; 0x03
	}
}
 314:	08 95       	ret

00000316 <Buffer_DataAvailable>:
uint8_t Buffer_DataAvailable(){
	if(mass1.HEAD==mass1.TAIL){
 316:	eb e0       	ldi	r30, 0x0B	; 11
 318:	f1 e0       	ldi	r31, 0x01	; 1
 31a:	90 81       	ld	r25, Z
 31c:	81 81       	ldd	r24, Z+1	; 0x01
 31e:	98 13       	cpse	r25, r24
 320:	09 c0       	rjmp	.+18     	; 0x334 <Buffer_DataAvailable+0x1e>
		if(mass1.UNHANDLED==0){
			return 0;
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <mass1+0x2>
 328:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <mass1+0x3>
 32c:	23 2b       	or	r18, r19
 32e:	19 f4       	brne	.+6      	; 0x336 <Buffer_DataAvailable+0x20>
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	08 95       	ret
		}else{ 
			return 1;
		}
	}else{
		return 1;
 334:	81 e0       	ldi	r24, 0x01	; 1
	}
}
 336:	08 95       	ret

00000338 <__vector_18>:

ISR(USART_RX_vect){
 338:	1f 92       	push	r1
 33a:	0f 92       	push	r0
 33c:	0f b6       	in	r0, 0x3f	; 63
 33e:	0f 92       	push	r0
 340:	11 24       	eor	r1, r1
 342:	2f 93       	push	r18
 344:	3f 93       	push	r19
 346:	4f 93       	push	r20
 348:	5f 93       	push	r21
 34a:	6f 93       	push	r22
 34c:	7f 93       	push	r23
 34e:	8f 93       	push	r24
 350:	9f 93       	push	r25
 352:	af 93       	push	r26
 354:	bf 93       	push	r27
 356:	cf 93       	push	r28
 358:	df 93       	push	r29
 35a:	ef 93       	push	r30
 35c:	ff 93       	push	r31
	UCSR0B&=~(1<<RXCIE0);
 35e:	c1 ec       	ldi	r28, 0xC1	; 193
 360:	d0 e0       	ldi	r29, 0x00	; 0
 362:	88 81       	ld	r24, Y
 364:	8f 77       	andi	r24, 0x7F	; 127
 366:	88 83       	st	Y, r24
	Buffer_Write(UDR0);
 368:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 36c:	0e 94 36 01 	call	0x26c	; 0x26c <Buffer_Write>
	UCSR0B|=1<<RXCIE0;
 370:	88 81       	ld	r24, Y
 372:	80 68       	ori	r24, 0x80	; 128
 374:	88 83       	st	Y, r24
}
 376:	ff 91       	pop	r31
 378:	ef 91       	pop	r30
 37a:	df 91       	pop	r29
 37c:	cf 91       	pop	r28
 37e:	bf 91       	pop	r27
 380:	af 91       	pop	r26
 382:	9f 91       	pop	r25
 384:	8f 91       	pop	r24
 386:	7f 91       	pop	r23
 388:	6f 91       	pop	r22
 38a:	5f 91       	pop	r21
 38c:	4f 91       	pop	r20
 38e:	3f 91       	pop	r19
 390:	2f 91       	pop	r18
 392:	0f 90       	pop	r0
 394:	0f be       	out	0x3f, r0	; 63
 396:	0f 90       	pop	r0
 398:	1f 90       	pop	r1
 39a:	18 95       	reti

0000039c <USART_Init>:

void USART_Init(){
	UCSR0B|=(1<<RXCIE0)|(1<<TXEN0)|(1<<RXEN0);
 39c:	e1 ec       	ldi	r30, 0xC1	; 193
 39e:	f0 e0       	ldi	r31, 0x00	; 0
 3a0:	80 81       	ld	r24, Z
 3a2:	88 69       	ori	r24, 0x98	; 152
 3a4:	80 83       	st	Z, r24
	UCSR0C|=(1<<UCSZ01)|(1<<UCSZ00);
 3a6:	e2 ec       	ldi	r30, 0xC2	; 194
 3a8:	f0 e0       	ldi	r31, 0x00	; 0
 3aa:	80 81       	ld	r24, Z
 3ac:	86 60       	ori	r24, 0x06	; 6
 3ae:	80 83       	st	Z, r24
	UBRR0L = 51;
 3b0:	83 e3       	ldi	r24, 0x33	; 51
 3b2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 3b6:	08 95       	ret

000003b8 <_exit>:
 3b8:	f8 94       	cli

000003ba <__stop_program>:
 3ba:	ff cf       	rjmp	.-2      	; 0x3ba <__stop_program>
